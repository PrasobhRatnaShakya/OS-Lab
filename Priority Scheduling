#include <stdio.h>

#define MAX 100

void sortByArrival(int n, int at[], int bt[], int pr[], int pid[]) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (at[j] > at[j + 1]) {
                int temp = at[j];
                at[j] = at[j + 1];
                at[j + 1] = temp;

                temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;

                temp = pr[j];
                pr[j] = pr[j + 1];
                pr[j + 1] = temp;

                temp = pid[j];
                pid[j] = pid[j + 1];
                pid[j + 1] = temp;
            }
        }
    }
}

void preemptivePriority(int n, int at[], int bt[], int pr[]) {
    int remaining[MAX], ct[MAX], tat[MAX], wt[MAX];
    int completed = 0, time = 0, min_priority, min_index;

    for (int i = 0; i < n; i++) remaining[i] = bt[i];

    while (completed < n) {
        min_priority = 9999;
        min_index = -1;

        for (int i = 0; i < n; i++) {
            if (at[i] <= time && remaining[i] > 0 && pr[i] < min_priority) {
                min_priority = pr[i];
                min_index = i;
            }
        }

        if (min_index == -1) {
            time++;
            continue;
        }

        remaining[min_index]--;
        time++;

        if (remaining[min_index] == 0) {
            completed++;
            ct[min_index] = time;
            tat[min_index] = ct[min_index] - at[min_index];
            wt[min_index] = tat[min_index] - bt[min_index];
        }
    }

    printf("\nPID\tAT\tBT\tPriority\tCT\tTAT\tWT\n");
    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n", i + 1, at[i], bt[i], pr[i], ct[i], tat[i], wt[i]);
        total_wt += wt[i];
        total_tat += tat[i];
    }

    float avg_wt = total_wt / n;
    float avg_tat = total_tat / n;

    printf("\nAverage Waiting Time: %.2f", avg_wt);
    printf("\nAverage Turnaround Time: %.2f\n", avg_tat);
}

void nonPreemptivePriority(int n, int at[], int bt[], int pr[]) {
    int ct[MAX], tat[MAX], wt[MAX], completed = 0, time = 0, min_priority, min_index;
    int completedFlag[MAX] = {0};

    sortByArrival(n, at, bt, pr, ct);

    while (completed < n) {
        min_priority = 9999;
        min_index = -1;

        for (int i = 0; i < n; i++) {
            if (at[i] <= time && completedFlag[i] == 0 && pr[i] < min_priority) {
                min_priority = pr[i];
                min_index = i;
            }
        }

        if (min_index == -1) {
            time++;
            continue;
        }

        time += bt[min_index];
        ct[min_index] = time;
        tat[min_index] = ct[min_index] - at[min_index];
        wt[min_index] = tat[min_index] - bt[min_index];
        completedFlag[min_index] = 1;
        completed++;
    }

    printf("\nPID\tAT\tBT\tPriority\tCT\tTAT\tWT\n");
    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n", i + 1, at[i], bt[i], pr[i], ct[i], tat[i], wt[i]);
        total_wt += wt[i];
        total_tat += tat[i];
    }

    float avg_wt = total_wt / n;
    float avg_tat = total_tat / n;

    printf("\nAverage Waiting Time: %.2f", avg_wt);
    printf("\nAverage Turnaround Time: %.2f\n", avg_tat);
}

int main() {
    int n;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    int at[MAX], bt[MAX], pr[MAX], pid[MAX];

    for (int i = 0; i < n; i++) {
        pid[i] = i + 1;
        printf("\nEnter arrival time, burst time, and priority for Process %d: ", i + 1);
        scanf("%d %d %d", &at[i], &bt[i], &pr[i]);
    }

    printf("\nPreemptive Priority Scheduling:\n");
    preemptivePriority(n, at, bt, pr);

    printf("\nNon-Preemptive Priority Scheduling:\n");
    nonPreemptivePriority(n, at, bt, pr);

    return 0;
}
